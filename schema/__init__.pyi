import sys
from abc import abstractmethod
from typing import (
    Any,
    List,
    TypeVar,
    Union,
    Type,
    Callable,
    AnyStr,
    overload,
    Optional as _Optional,
    Pattern,
    NoReturn,
    Sized,
    ClassVar
)

if sys.version_info >= (3, 6):
    from re import RegexFlag
    _FlagsType = Union[int, RegexFlag]
else:
    _FlagsType = int

if sys.version_info >= (3, 8):
    from typing import Porotocol, Literal as _Literal
else:
    from typing_extensions import Protocol, Literal as _Literal


class SupportsValidate(Protocol):
    @abstractmethod
    def validate(self, data: Any) -> Any: ...


T = TypeVar('T')
RT = TypeVar('RT')

Errors = Union[None, str, List[_Optional[str]]]
SchemaInput = Union[
    Union[list, tuple, set, frozenset],
    dict,
    type,
    Literal,
    SupportsValidate,
    Callable[[Any], Any],
    Any
]

class SchemaError(Exception):
    autos: List[_Optional[str]] = ...
    errors: List[_Optional[str]] = ...

    def __init__(self, autos: Union[T, List[T]], errors: Errors = ...) -> None: ...
    @property
    def code(self) -> str: ...

class SchemaWrongKeyError(SchemaError): ...
class SchemaMissingKeyError(SchemaError): ...
class SchemaOnlyOneAllowedError(SchemaError): ...
class SchemaForbiddenKeyError(SchemaError): ...
class SchemaUnexpectedTypeError(SchemaError): ...

class And:
    _args: SchemaInput = ...
    _errors: Errors = ...
    _ignore_extra_keys: bool = ...
    _schema: Type[Schema] = ...

    def __init__(self, *args: SchemaInput, **kw: Any) -> None: ...
    @property
    def args(self) -> SchemaInput: ...
    def validate(self, data: Any) -> Any: ...

class Or(And):
    only_one: bool = ...
    match_count: int = ...

    def __init__(self, *args: SchemaInput, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data: Any) -> Any: ...

class Regex:
    NAMES: ClassVar[List[str]] = ...
    _pattern_str: Union[str, bytes] = ...
    _flags_names: str = ...
    _pattern: Union[str, bytes] = ...
    _error: Errors = ...

    def __init__(self, pattern_str: AnyStr, flags: _FlagsType = ..., error: Errors = ...) -> None: ...
    @property
    def pattern_str(self) -> AnyStr: ...
    def validate(self, data: AnyStr) -> AnyStr: ...

class Use:
    _error: Errors = ...

    def __init__(self, callable_: Callable[[T], RT], error: Errors = ...) -> None: ...
    def validate(self, data: T) -> RT: ...

def _priority(s: SchemaInput) -> int: ...

class Schema:
    as_reference: bool = ...
    _schema: SchemaInput = ...
    _error: Errors = ...
    _ignore_extra_keys: bool = ...
    _name: _Optional[str] = ...
    _description: _Optional[str] = ...

    @overload
    def __init__(self, schema: SchemaInput, error: Errors = ..., ignore_extra_keys: bool = ..., name: str = ..., description: _Optional[str] = ..., as_reference: _Literal[True] = ...) -> None: ...
    @overload
    def __init__(self, schema: SchemaInput, error: Errors = ..., ignore_extra_keys: bool = ..., name: _Optional[str] = ..., description: _Optional[str] = ..., as_reference: _Literal[False] = ...) -> None: ...
    @property
    def schema(self) -> SchemaInput: ...
    @property
    def description(self) -> _Optional[str]: ...
    @property
    def name(self) -> _Optional[str]: ...
    @property
    def ignore_extra_keys(self) -> bool: ...
    @overload
    @staticmethod
    def _dict_key_priority(s: Union[Hook, Optional]) -> float: ...
    @overload
    @staticmethod
    def _dict_key_priority(s: SchemaInput) -> float: ...
    @overload
    @staticmethod
    def _is_optional_type(s: Union[Hook, Optional]) -> _Literal[True]: ...
    @overload
    @staticmethod
    def _is_optional_type(s: SchemaInput) -> bool: ...
    def is_valid(self, data: Any) -> bool: ...
    def _prepend_schema_name(self, message: str) -> str: ...
    def validate(self, data: Any) -> Any: ...
    def json_schema(self, schema_id: Any, use_refs: bool = ...): ...

class Optional(Schema):
    default: Any = ...
    key: str = ...
    _MARKER: ClassVar[object]

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    def reset(self) -> None: ...

class Hook(Schema):
    handler: Callable[..., None] = ...
    key: Any = ...

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def _default_function(nkey: Any, data: Any, error: Errors) -> NoReturn: ...

class Literal:
    _schema: str
    _description: _Optional[str]

    def __init__(self, value: str, description: _Optional[str] = ...) -> None: ...
    @property
    def description(self) -> _Optional[str]: ...
    @property
    def schema(self) -> str: ...

class Const(Schema):
    def validate(self, data: T) -> T: ...

def _callable_str(callable_: Callable) -> str: ...
def _plural_s(sized: Sized) -> int: ...
